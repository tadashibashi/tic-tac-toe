{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tictactoe/./src/Board.ts","webpack://tictactoe/./src/Engine/Delegate.ts","webpack://tictactoe/./src/Engine/Model.ts","webpack://tictactoe/./src/GameModel.ts","webpack://tictactoe/./src/Engine/View.ts","webpack://tictactoe/./src/GameView.ts","webpack://tictactoe/./node_modules/js-cookie/dist/js.cookie.mjs","webpack://tictactoe/./src/GameController.ts","webpack://tictactoe/./src/Game.ts"],"sourcesContent":["/**\n * Symbol representing player id\n */\nexport enum Sym {\n    Null=0,\n    X,\n    O,\n}\n\n/**\n * When checking who won, represents the result\n */\nexport enum BoardResult {\n    // No one has won\n    None=0,\n    // Player 'X' won\n    X,\n    // Player 'O' won\n    O,\n    // Cats game, draw\n    Cats,\n}\n\nexport class Board {\n    private rows: Sym[][];\n\n    public constructor(rows?: Sym[][]) {\n        if (rows) {\n            this.rows = [];\n            rows.forEach(row => this.rows.push([...row]));\n        } else {\n            this.reset();\n        }\n    }\n    \n    public copy(): Board {\n        return new Board(this.rows);\n    }\n\n    public reset() {\n        this.rows = [\n            [Sym.Null, Sym.Null, Sym.Null],\n            [Sym.Null, Sym.Null, Sym.Null],\n            [Sym.Null, Sym.Null, Sym.Null]\n        ];\n    }\n\n    public forEachRow(cb: (row: Sym[], i?: number) => any) {\n        this.rows.forEach(cb);\n    }\n\n    public spaceEmpty(row: number, col: number) {\n        return this.rows[row][col] === Sym.Null;\n    }\n\n    public set(row: number, col: number, sym: Sym): void {\n        this.rows[row][col] = sym;\n    }\n\n    public get(row: number, col: number): Sym {\n        return this.rows[row][col];\n    }\n\n    public nextOptimalMove(sym: Sym): {row: number, col: number, rating: number} {\n        let bestRating = -Infinity;\n        let bestCells: {row: number, col: number}[] = [];\n\n        const rows = this.rows.length;\n        const cols = this.rows[0].length;\n\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                const rating = this.rateCell(row, col, sym);\n                if (rating > bestRating) {\n                    bestRating = rating;\n                    bestCells = [{row, col}];\n                } else if (rating === bestRating) {\n                    bestCells.push({row, col});\n                }\n            }\n        }\n        const randIndex = Math.floor(Math.random() * bestCells.length);\n        return {\n            row: bestCells[randIndex].row,\n            col: bestCells[randIndex].col,\n            rating: bestRating,\n        };\n    }\n\n    /**\n     *  Gets the rating for a given cell position representing most optimal next play position\n     *  for the given player symbol.\n     *  Does not take into account blocking an opponent, make sure to check for this if programming\n     *  the AI for a computer player or giving a player hint.\n     *  Assumes a valid row and column was given.\n     *  Safe to call if cell is occupied–it will efficiently return 0.\n     *  @param row {number} integer, representing the target row to check\n     *  @param col {number} integer, representing the target column to check\n     *  @param sym {Sym} the player to check for\n     *  @returns {number} the rating for the cell. Higher means greater optimization.\n     *  Compare with the others cells for optimal next move.\n     */\n    public rateCell(row: number, col: number, sym: Sym): number {\n        if (this.get(row, col) !== 0) // piece already here, non-viable position\n            return 0;\n\n        const cols = this.rows[0].length;\n        const rows = this.rows.length;\n\n        let rating = 0;\n\n        // check row\n        let temp = 0;\n        for (let i = 0; i < cols; ++i) {\n            const cur = i === col ? sym : this.get(row, i);\n\n            if (cur === sym) {       // own piece, increase viability\n                temp = (temp + 1) * cols;\n            } else if (cur !== 0) {  // opposing piece, bad row\n                temp = 0;\n                break;\n            }\n        }\n\n        rating += temp;\n\n        // check column\n        temp = 0;\n        for (let i = 0; i < rows; ++i) {\n            const cur = (i === row) ? sym : this.get(i, col);\n\n            if (cur === sym)       // own piece, increase viability\n                temp = (temp + 1) * rows;\n            else if (cur !== 0) {  // opposing piece, bad row\n                temp = 0;\n                break;\n            }\n        }\n\n        rating += temp;\n\n        // check diags\n\n        // currently do not support non-square grids\n        if (rows != cols) return rating;\n\n        // cell is in diag: top-left to bottom-right\n        if (row == col) {\n            temp = 0;\n            for (let i = 0; i < rows; ++i) {\n                const cur = i === row ? sym : this.get(i, i);\n\n                if (cur === sym) {\n                    temp = (temp + 1) * rows;\n                } else if (cur !== 0) {\n                    temp = 0;\n                    break;\n                }\n            }\n\n            rating += temp;\n        }\n\n        // cell is in diag: bottom-left to top-right\n        if (rows-1-row === col) {\n            temp = 0;\n            for (let i = 0; i < rows; ++i) {\n                const curRow = rows-1-i;\n                const cur = curRow === row && i === col ? sym : this.get(curRow, i);\n\n                if (cur === sym)\n                    temp = (temp + 1) * rows;\n                else if (cur !== 0) {\n                    temp = 0;\n                    break;\n                }\n            }\n\n            rating += temp;\n        }\n\n        return rating;\n    }\n\n    /**\n     * Check to see game win status.\n     * @param sym {Sym?} optional: specific symbol to check for\n     */\n    public checkWin(sym?: Sym): {result: BoardResult, squares?: {row: number, col: number}[]} {\n\n        if (sym) {\n            const result = this.__checkWin(sym);\n            if (result.didWin) {\n                return {\n                    result: sym === Sym.O ? BoardResult.O : BoardResult.X,\n                    squares: result.squares\n                };\n            } else if (this.__boardFull()) {\n                return {result: BoardResult.Cats};\n            } else {\n                return {result: BoardResult.None};\n            }\n        } else {\n            let result;\n            if ((result = this.__checkWin(Sym.X)))\n                return {result: BoardResult.X, squares: result.squares};\n            else if ((result = this.__checkWin(Sym.O)))\n                return {result: BoardResult.O, squares: result.squares};\n            else if (this.__boardFull())\n                return {result: BoardResult.Cats};\n            else\n                return {result: BoardResult.None};\n        }\n\n    }\n\n    private __checkWin(sym: Sym): {didWin: boolean, squares?: {row: number, col: number}[] } {\n        // Check rows\n        const squares = [{row: -1, col: -1}, {row: -1, col: -1}, {row: -1, col: -1}];\n        for (let row = 0; row < this.rows.length; ++row) {\n\n            let didWin = true;\n            for (let col = 0; col < this.rows[0].length; ++col) {\n                if (this.rows[row][col] !== sym) {\n                    didWin = false;\n                    break;\n                }\n                squares[col] = {row, col};\n            }\n\n            if (didWin) return {squares, didWin};\n        }\n\n        // Check cols\n        for (let col = 0; col < this.rows[0].length; ++col) {\n\n            let didWin = true;\n            for (let row = 0; row < this.rows.length; ++row) {\n                if (this.rows[row][col] !== sym) {\n                    didWin = false;\n                    break;\n                }\n                squares[row] = {row, col};\n            }\n\n            if (didWin) return {squares, didWin};\n        }\n\n        // Check diag \n        // Top-left to bottom-right\n        let didWin = true;\n        for (let i = 0; i < this.rows.length; ++i) {\n            if (this.rows[i][i] !== sym) {\n                didWin = false;\n                break;\n            }\n            squares[i] = {row: i, col: i};\n        }\n        if (didWin) return {squares, didWin};\n\n        // Bottom-left to top-right\n        didWin = true;\n        for (let i = 0; i < this.rows.length; ++i) {\n            if (this.rows[this.rows.length-1-i][i] !== sym) {\n                didWin = false;\n                break;\n            }\n            squares[i] = {row: this.rows.length-1-i, col: i};\n        }\n        \n        return {didWin, squares};\n    }\n\n    private __boardFull(): boolean {\n        for (let row = 0; row < this.rows.length; ++row) {\n            for (let col = 0; col < this.rows[row].length; ++col)\n                if (this.rows[row][col] === Sym.Null)\n                    return false;\n        }\n\n        return true;\n    }\n}\n","\ninterface Callback<Args extends any[]> {\n    context: any;\n    callback: (...args: Args) => void;\n}\n\n\n/**\n * Class that stores and invokes callback. Similar to the subject in the Observer pattern.\n * Can store 'this' context, if needed, e.g. class function performed on an instance.\n */\nexport class Delegate<Args extends any[]> {\n    private callbacks: Callback<Args>[];\n\n    constructor() {\n        this.callbacks = [];\n    }\n    addListener(callback: (...args: Args) => void, context: any = null) {\n        this.callbacks.push({context, callback});\n    }\n\n    /**\n     * Removes listener. Must be called with the same arguments called from Delegate.addListener.\n     * @param callback Function to set\n     * @param context 'this' context. (Arrow functions automatically capture 'this', and do not\n     * need this parameter set.)\n     */\n    removeListener(callback: (...args: Args) => void, context: any = null) {\n        for (let i = 0; i < this.callbacks.length; ++i) {\n            if (Object.is(this.callbacks[i].callback, callback) &&\n                (context ? Object.is(this.callbacks[i].context, context) : true)) {\n                this.callbacks.splice(i, 1);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    invoke(...args: Args) {\n        for (let i = 0; i < this.callbacks.length; ++i) {\n            if (this.callbacks[i].context)\n                this.callbacks[i].callback.call(this.callbacks[i].context, ...args);\n            else\n                this.callbacks[i].callback(...args);\n        }\n    }\n\n    get length() {\n        return this.callbacks.length;\n    }\n\n    clear() {\n        this.callbacks = [];\n    }\n}\n","import { Delegate } from \"./Delegate\";\n\nconst DEBUG_MODE = true; // when set to true, saves state\nconst DEBUG_AUTOLOG = true; // auto logs state when it changes. DEBUG_MODE must be true.\n\ninterface StateInfo<T> {\n    state: T;\n    time: Date;\n}\n\nexport abstract class Model<State, Props, ActionType> {\n    private mState: State;\n    private readonly mProps: Props;\n    private readonly stateHistory: StateInfo<State>[];\n\n    /**\n     * Current state data. Read-only, please don't modify directly.\n     */\n    public get state() { return this.mState; }\n\n    /**\n     * Props data. Usually contains cached refs.\n     * Read-only, please don't modify directly.\n     */\n    public get props() { return this.mProps; }\n\n\n    /**\n     * # statechange\n     * ## params:\n     *   - `newState` the updated state\n     *   - `lastState` the last state\n     *   - `shouldRender` if the statechange should cause an update to rendering\n     * definition: (newState: State, lastState: State, shouldRender: boolean) => void\n     */\n    public readonly statechange: Delegate<[Model<State, Props, ActionType>, boolean]>;\n\n\n    protected constructor(defaultState: State, props: Props) {\n        this.mState = defaultState;\n        this.mProps = props;\n        this.statechange = new Delegate();\n\n        if (DEBUG_MODE)\n            this.stateHistory = [];\n    }\n\n\n    protected reducer(action: ActionType, data: any, shouldRender: boolean) {\n        const newState = this.reducerImpl(action, data, this.mState);\n\n        if (Object.is(this.mState, newState)) // state did not change, returned lastState\n            return;\n\n        if (DEBUG_MODE) {          // store state history\n            const stateInfo = {state: newState, time: new Date()};\n            if (DEBUG_AUTOLOG) {   // auto log when state changes\n                this.logState(stateInfo, this.stateHistory.length);\n            }\n\n            this.stateHistory.push(stateInfo);\n        }\n\n        // commit changes\n        this.mState = newState;\n        this.statechange.invoke(this, shouldRender);\n    }\n\n\n    /**\n     * Callback to be overriden. Update state based on action type.\n     * Return a new state object to alter state. Returning lastState object\n     * will cancel any effect.\n     */\n    protected abstract reducerImpl(action: ActionType, data: any, lastState: State): State;\n\n\n    /**\n     * For debugging, logs the history of each state change.\n     * @param lastN {number} log the last number of entries. Default 0, will log all.\n     * When state history length is less than lastN, all entries will be logged.\n     */\n    public logStateHistory(lastN = 0) {\n        if (!DEBUG_MODE) return;\n\n        const length = this.stateHistory.length;\n        const start = lastN < 1 ? 0 : Math.max(length - lastN, 0);\n\n        for (let i = start; i < length; ++i)\n            this.logState(this.stateHistory[i], i);\n    }\n\n    private logState(info: StateInfo<State>, stateNum: number) {\n        console.log(`State #${stateNum} | ${info.time.toLocaleTimeString()}`);\n        console.dir(info.state);\n    }\n}","import {Model} from \"./Engine/Model\";\nimport {Board, Sym} from \"./Board\";\n\n\ninterface GameProps {\n    boardEl: HTMLElement,\n    displayEl: HTMLElement,\n    resetBtnEl: HTMLElement,\n    compSliderEl: HTMLInputElement,\n    computerP2: boolean,\n}\n\n\nexport enum State {\n    Start,\n    P1Turn,\n    P2Turn,\n    Result // Show result text, play again?\n}\n\n\ninterface GameState {\n    board: Board;\n    message: string;\n    gameState: State;\n}\n\n\nenum GameAction {\n    SetBoard,\n    SetMessage,\n    SetWinner,\n    Reset,\n}\n\n\nexport class GameModel extends Model<GameState, GameProps, GameAction> {\n    constructor() {\n        const props = {\n            // initialize html elements\n            boardEl: document.getElementById(\"board\"),\n            displayEl: document.getElementById(\"display\"),\n            resetBtnEl: document.getElementById(\"reset-btn\"),\n            compSliderEl: document.querySelector(\".slider-box input\") as HTMLInputElement,\n            computerP2: false,\n        };\n\n        const state = {\n          board: new Board(),\n          message: \"Welcome\",\n          gameState: State.Start\n        };\n\n        super(state, props);\n    }\n\n\n    setSym(row: number, col: number, sym: Sym) {\n        this.reducer(GameAction.SetBoard, {row, col, sym}, true);\n    }\n\n    setMessage(message: string) {\n        this.reducer(GameAction.SetMessage, message, true);\n    }\n\n    setWinner(data:{sym: Sym, squares?: {row: number, col: number}[]}) {\n        this.reducer(GameAction.SetWinner, data, true);\n    }\n\n    reset() {\n        this.reducer(GameAction.Reset, null, true);\n    }\n\n    reducerImpl(action: GameAction, data: any, lastState: GameState): GameState {\n\n        switch(action) {\n\n            case GameAction.SetBoard: {\n                const newState = {\n                    board: lastState.board.copy(),\n                    message: lastState.message,\n                    gameState: lastState.gameState\n                };\n\n                if (data.sym === Sym.O) {\n                    newState.message = \"Player X's Turn\";\n                    newState.gameState = State.P2Turn;\n                } else {\n                    newState.message = \"Player O's Turn\";\n                    newState.gameState = State.P1Turn;\n                }\n\n                newState.board.set(data.row, data.col, data.sym);\n\n                return newState;\n            }\n\n\n            case GameAction.SetMessage: {\n                return {\n                    board: lastState.board.copy(),\n                    message: data as string,\n                    gameState: lastState.gameState\n                };\n            }\n\n\n            case GameAction.SetWinner: {\n                let message, color;\n                switch(data.sym) {\n                    case Sym.O:\n                        message = \"Player O Won!\";\n                        color = \"green\";\n                        break;\n                    case Sym.X:\n                        message = \"Player X Won!\";\n                        color = \"red\";\n                        break;\n                    case Sym.Null:\n                        message = \"Cats Game!\";\n                        color = \"gray\";\n                        break;\n                }\n\n                if (data.sym === Sym.Null) {\n                    for (let i = 0; i < 9; ++i) {\n                        const sqEl = this.props.boardEl.children[i] as HTMLElement;\n                        sqEl.style.background = color;\n                    }\n                } else {\n                    if (data.squares) {\n                        data.squares.forEach(sq => {\n                            const sqEl = this.props.boardEl.children[sq.row * 3 + sq.col] as HTMLElement;\n                            sqEl.style.background = color;\n                        });\n                    }\n                }\n\n                return {\n                    board: lastState.board.copy(),\n                    message,\n                    gameState: State.Result\n                };\n            }\n\n\n            case GameAction.Reset: {\n                for (let i = 0; i < 9; ++i) {\n                    const sqEl = this.props.boardEl.children[i] as HTMLElement;\n                    sqEl.style.background = \"white\";\n                }\n\n                return {\n                    board: new Board(),\n                    message: \"Player O's Turn\",\n                    gameState: State.P1Turn\n                }\n            }\n\n\n            default:\n                return lastState;\n        }\n    }\n\n}","import { Model } from \"./Model\";\n\nexport abstract class View<M extends Model<any, any, any>> {\n    private model: M;\n\n    protected constructor(model: M) {\n        this.model = model;\n        model.statechange.addListener(this.render, this);\n        this.render(model, true);\n    }\n\n    // Render to the DOM\n    private render(model: M, shouldRender: boolean) {\n        if (!shouldRender) return;\n\n        this.renderImpl(model);\n    }\n\n    public abstract renderImpl(model: M);\n\n    close() {\n        this.model.statechange.removeListener(this.render, this);\n    }\n\n}\n\n","import { Sym } from \"./Board\";\nimport { View } from \"./Engine/View\";\nimport {GameModel} from \"./GameModel\";\n\n\nexport class GameView extends View<GameModel> {\n\n    constructor(model: GameModel) {\n        super(model);\n    }\n\n    renderImpl(model: GameModel) {\n        model.props.displayEl.innerText = model.state.message;\n\n        const squares = model.props.boardEl.children;\n        model.state.board.forEachRow((row, rowNum) => {\n\n            for (let colNum = 0; colNum < 3; ++colNum) {\n                const square = squares[rowNum * 3 + colNum] as HTMLElement;\n                switch(row[colNum]) {\n                    case Sym.O:\n                        square.innerText = \"O\"\n                        break;\n                    case Sym.X:\n                        square.innerText = \"X\";\n                        break;\n                    case Sym.Null:\n                        square.innerText = \"\";\n                }\n            }\n        });\n    }\n\n}\n\n","/*! js-cookie v3.0.5 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (name, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    name = encodeURIComponent(name)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      name + '=' + converter.write(value, name) + stringifiedAttributes)\n  }\n\n  function get (name) {\n    if (typeof document === 'undefined' || (arguments.length && !name)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var found = decodeURIComponent(parts[0]);\n        jar[found] = converter.read(value, found);\n\n        if (name === found) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return name ? jar[name] : jar\n  }\n\n  return Object.create(\n    {\n      set,\n      get,\n      remove: function (name, attributes) {\n        set(\n          name,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport { api as default };\n","import {BoardResult, Sym} from \"./Board\";\nimport {GameModel, State} from \"./GameModel\";\nimport Cookie from \"js-cookie\";\n\ninterface GridPoint {\n    row: number;\n    col: number;\n}\n\nfunction parseGridId(id: string, pos?: GridPoint): GridPoint {\n    const ret: Partial<GridPoint> = pos ? pos : {};\n    ret.row = Number(id[1]);\n    ret.col = Number(id[3]);\n\n    return ret as GridPoint;\n}\n\nexport class GameController {\n    private model: GameModel;\n    constructor(model: GameModel) {\n        this.model = model;\n        this.init();\n        this.computerTimeout = null;\n    }\n\n    computerTimeout: NodeJS.Timeout;\n\n\n    private detectCrossAttack(sym: Sym) {\n        let numPieces = 0;\n        const board = this.model.state.board;\n\n        for (let row = 0; row < 3; ++row) {\n            for (let col = 0; col < 3; ++col) {\n                if (board.get(row, col) !== 0)\n                    ++numPieces;\n            }\n        }\n\n        if (numPieces !== 3) return false;\n\n        // diag top-left, bottom-right\n        if (board.get(0, 0) !== 0 &&\n            board.get(0, 0) !== sym &&\n            board.get(1, 1) === sym &&\n            board.get(2, 2) !== 0 &&\n            board.get(2, 2) !== sym)\n                return true;\n\n        // diag bottom-left, top-right\n        if (board.get(2, 0) !== 0 &&\n            board.get(2, 0) !== sym &&\n            board.get(1, 1) === sym &&\n            board.get(0, 2) !== 0 &&\n            board.get(0, 2) !== sym)\n            return true;\n\n        return false;\n    }\n\n    /**\n     * Gets the next optimal move cell for a player\n     * @param sym {Sym} the player to get the next optimal move for\n     * @private\n     */\n    private optimalCell(sym: Sym): GridPoint {\n        const board = this.model.state.board;\n\n        const playerMove = board.nextOptimalMove(Sym.O);\n        const compMove = board.nextOptimalMove(Sym.X);\n\n        // mitigate cross attack\n        if (this.detectCrossAttack(sym)) { // detects if opponent of sym is attacking\n            if (board.spaceEmpty(0, 1))\n                return {row: 0, col: 1};\n            else if (board.spaceEmpty(1, 0))\n                return {row: 1, col: 0};\n            else if (board.spaceEmpty(2, 1))\n                return {row: 2, col: 1};\n            else if (board.spaceEmpty(1, 2))\n                return {row: 1, col: 2};\n        }\n\n        if (sym === Sym.O) { // player, if player going to win, prefer player move\n            return playerMove.rating >= compMove.rating ?\n                {row: playerMove.row, col: playerMove.col} :\n                {row: compMove.row, col: compMove.row};\n        } else if (sym === Sym.X) { // comp, if comp going to win, prefer comp move\n            return compMove.rating >= playerMove.rating ?\n                {row: compMove.row, col: compMove.col} :\n                {row: playerMove.row, col: playerMove.col};\n        } else {\n            throw new Error(\"[GameController.optimalCell]: Sym is an invalid value!\");\n        }\n    }\n\n    private init() {\n        const boardEl = this.model.props.boardEl;\n        const resetBtnEl = this.model.props.resetBtnEl;\n        const compSliderEl = this.model.props.compSliderEl;\n\n        // connect listeners to objects\n        boardEl.addEventListener(\"click\", (evt) => {\n            const target = evt.target as HTMLElement;\n            if (target === boardEl) // No propagated clicks to Board element should pass\n                return;\n\n            // grab position from target id\n            const pos = parseGridId(target.getAttribute(\"id\"));\n\n            // state machine\n            const gameState = this.model.state.gameState;\n            switch(gameState) {\n                case State.Start:\n                    this.model.reset();\n                    resetBtnEl.innerText = \"Reset Game\";\n                    break;\n                case State.P1Turn:\n                case State.P2Turn:\n                    if (gameState === State.P2Turn && this.model.props.computerP2) { // computer move\n                        // do nothing... perhaps write inverse if statement?\n                    } else {                                                         // player move\n                        target.classList.add(\"pop-in\");\n                        this.statePlayerTurn(pos.row, pos.col,\n                            gameState === State.P1Turn ? Sym.O : Sym.X);\n                    }\n\n                    break;\n            }\n        });\n\n        boardEl.addEventListener(\"animationend\", evt => {\n           const target = evt.target as HTMLElement;\n           if (target === boardEl) return;\n\n           if (evt.animationName === \"pop-in\") {\n               target.classList.remove(\"pop-in\");\n           }\n        });\n\n        resetBtnEl.addEventListener(\"click\", evt => {\n            //const target = evt.target as HTMLButtonElement;\n            this.model.reset();\n            resetBtnEl.innerText = \"Reset\";\n        });\n\n        compSliderEl.addEventListener(\"input\", evt => {\n            this.model.props.computerP2 = compSliderEl.checked;\n\n            Cookie.set(\"computer-p2\", compSliderEl.checked ? \"true\" : \"false\", {expires: 365});\n\n            if (compSliderEl.checked && this.model.state.gameState === State.P2Turn) {\n                this.computerTurn();\n            }\n        });\n\n        // set compSlider computer state based on cookie\n        const computerP2 = Cookie.get(\"computer-p2\");\n        if (computerP2 === \"true\") {\n            compSliderEl.checked = true;\n            this.model.props.computerP2 = true;\n        }\n\n        // start game in a few seconds\n        setTimeout(() => {\n            if (this.model.state.gameState !== State.P1Turn) {\n                this.model.reset();\n                resetBtnEl.innerText = \"Reset\";\n            }\n        }, 1000);\n    }\n\n\n    private statePlayerTurn(row: number, col: number, sym: Sym) {\n        if (!this.model.state.board.spaceEmpty(row, col))\n            return;\n\n        this.model.setSym(row, col, sym);\n\n        const winState = this.model.state.board.checkWin(sym);\n        if (winState.result === BoardResult.X || winState.result === BoardResult.O)\n            this.model.setWinner({sym, squares: winState.squares});\n        else if (winState.result === BoardResult.Cats)\n            this.model.setWinner({sym: Sym.Null});\n\n        // player turn ended and computer mode on, trigger computer move!\n        if (this.model.state.gameState === State.P2Turn &&\n            this.model.props.computerP2 && sym === Sym.O) {\n            this.computerTurn();\n        }\n    }\n\n    private computerTurn() {\n        if (this.computerTimeout !== null)\n            clearTimeout(this.computerTimeout);\n\n        this.computerTimeout = setTimeout(() => {\n            const compMove = this.optimalCell(Sym.X);\n            this.statePlayerTurn(compMove.row, compMove.col, Sym.X);\n            const el = document.getElementById(\"r\" + compMove.row + \"c\" + compMove.col);\n            el.click();\n            this.computerTimeout = null;\n        }, 1000);\n    }\n}","import { GameModel } from \"./GameModel\";\nimport { GameView } from \"./GameView\";\nimport { GameController } from \"./GameController\";\n\n// Sets up game and owns MVC\nclass Game {\n    model: GameModel;\n    view: GameView;\n    controller: GameController;\n\n    constructor() {\n        this.model = new GameModel();\n        this.view = new GameView(this.model);\n        this.controller = new GameController(this.model);\n    }\n}\n\nlet game;\nwindow.onload = function() {\n    game = new Game();\n}\n"],"names":["Sym","BoardResult","this","callbacks","addListener","callback","context","push","removeListener","i","length","Object","is","splice","invoke","call","args","clear","defaultState","props","mState","mProps","statechange","Delegate","stateHistory","reducer","action","data","shouldRender","newState","reducerImpl","stateInfo","state","time","Date","logState","logStateHistory","lastN","Math","max","info","stateNum","console","log","toLocaleTimeString","dir","State","GameAction","rows","forEach","row","reset","copy","Board","Null","forEachRow","cb","spaceEmpty","col","set","sym","get","nextOptimalMove","bestRating","bestCells","cols","rating","rateCell","randIndex","floor","random","temp","cur","curRow","checkWin","result","__checkWin","didWin","O","X","squares","__boardFull","Cats","None","boardEl","document","getElementById","displayEl","resetBtnEl","compSliderEl","querySelector","computerP2","board","message","gameState","Start","setSym","SetBoard","setMessage","SetMessage","setWinner","SetWinner","Reset","lastState","P2Turn","P1Turn","children","style","background","sq","Result","Model","model","render","renderImpl","close","innerText","rowNum","colNum","square","View","target","arguments","source","key","api","init","converter","defaultAttributes","name","value","attributes","expires","now","toUTCString","encodeURIComponent","replace","decodeURIComponent","escape","stringifiedAttributes","attributeName","split","cookie","write","create","cookies","jar","parts","slice","join","found","read","e","remove","withAttributes","withConverter","freeze","path","computerTimeout","detectCrossAttack","numPieces","optimalCell","playerMove","compMove","Error","addEventListener","evt","id","ret","pos","getAttribute","Number","classList","add","statePlayerTurn","animationName","checked","computerTurn","setTimeout","winState","clearTimeout","click","GameModel","view","GameView","controller","GameController","window","onload","Game"],"sourceRoot":""}